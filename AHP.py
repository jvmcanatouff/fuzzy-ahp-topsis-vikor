# -*- coding: utf-8 -*-

import numpy as np

# Matrizes de comparacao dos criterios, para cada especialista.
A1 = np.rot90(np.array([[[0.111111, 0.111111, 0.111111],[0.166667, 0.2, 0.25],[0.111111, 0.125, 0.142857],[1, 1, 1],[0.125, 0.142857, 0.166667],[0.111111, 0.125, 0.142857],[0.142857, 0.166667, 0.2],[0.333333, 0.5, 1],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[0.25, 0.333333, 0.5],[1, 1, 1]],[[0.166667, 0.2, 0.25],[1, 2, 3],[0.142857, 0.166667, 0.2],[3, 4, 5],[0.25, 0.333333, 0.5],[0.125, 0.142857, 0.166667],[0.142857, 0.166667, 0.2],[2, 3, 4],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[1, 1, 1],[2, 3, 4]],[[0.2, 0.25, 0.333333],[2, 3, 4],[0.166667, 0.2, 0.25],[6, 7, 8],[3, 4, 5],[0.166667, 0.2, 0.25],[0.333333, 0.5, 1],[6, 7, 8],[1, 1, 1],[1, 1, 1],[4, 5, 6],[4, 5, 6]],[[0.25, 0.333333, 0.5],[1, 2, 3],[0.142857, 0.166667, 0.2],[7, 8, 9],[0.333333, 0.5, 1],[0.2, 0.25, 0.333333],[0.2, 0.25, 0.333333],[3, 4, 5],[1, 1, 1],[1, 1, 1],[3, 4, 5],[3, 4, 5]],[[0.125, 0.142857, 0.125],[0.166667, 0.2, 0.25],[0.142857, 0.166667, 0.2],[3, 4, 5],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[0.142857, 0.166667, 0.2],[1, 1, 1],[0.2, 0.25, 0.333333],[0.125, 0.142857, 0.166667],[0.25, 0.333333, 0.5],[1, 2, 3]],[[0.25, 0.333333, 0.5],[4, 5, 6],[0.2, 0.25, 0.333333],[6, 7, 8],[3, 4, 5],[0.25, 0.333333, 0.5],[1, 1, 1],[5, 6, 7],[3, 4, 5],[1, 2, 3],[5, 6, 7],[5, 6, 7]],[[1, 2, 3],[3, 4, 5],[0.25, 0.333333, 0.5],[7, 8, 9],[4, 5, 6],[1, 1, 1],[2, 3, 4],[4, 5, 6],[3, 4, 5],[4, 5, 6],[6, 7, 8],[7, 8, 9]],[[0.142857, 0.166667, 0.2],[0.333333, 0.5, 1],[0.2, 0.25, 0.333333],[4, 5, 6],[1, 1, 1],[0.166667, 0.2, 0.25],[0.2, 0.25, 0.333333],[3, 4, 5],[1, 2, 3],[0.2, 0.25, 0.333333],[2, 3, 4],[6, 7, 8]],[[0.111111, 0.111111, 0.111111],[0.111111, 0.125, 0.142857],[0.111111, 0.111111, 0.111111],[1, 1, 1],[0.166667, 0.2, 0.25],[0.111111, 0.125, 0.142857],[0.125, 0.142857, 0.166667],[0.2, 0.25, 0.333333],[0.111111, 0.125, 0.142857],[0.125, 0.142857, 0.166667],[0.2, 0.25, 0.333333],[1, 1, 1]],[[1, 2, 3],[3, 4, 5],[1, 1, 1],[9, 9, 9],[3, 4, 5],[2, 3, 4],[3, 4, 5],[5, 6, 7],[5, 6, 7],[4, 5, 6],[5, 6, 7],[7, 8, 9]],[[0.2, 0.25, 0.333333],[1, 1, 1],[0.2, 0.25, 0.333333],[7, 8, 9],[1, 2, 3],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[4, 5, 6],[0.333333, 0.5, 1],[0.25, 0.333333, 0.5],[0.333333, 0.5, 1],[4, 5, 6]],[[1, 1, 1],[3, 4, 5],[0.333333, 0.5, 1],[9, 9, 9],[5, 6, 7],[0.333333, 0.5, 1],[2, 3, 4],[6, 7, 8],[2, 3, 4],[3, 4, 5],[4, 5, 6],[9, 9, 9]]]))
A2 = np.rot90(np.array([[[0.111111, 0.111111, 0.111111],[0.142857, 0.166667, 0.2],[0.111111, 0.125, 0.142857],[1, 1, 1],[0.142857, 0.166667, 0.2],[0.142857, 0.166667, 0.2],[0.111111, 0.125, 0.142857],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[0.111111, 0.111111, 0.111111],[0.125, 0.142857, 0.166667],[1, 1, 1]],[[0.166667, 0.2, 0.25],[1, 2, 3],[0.25, 0.333333, 0.5],[7, 8, 9],[1, 2, 3],[0.25, 0.333333, 0.5],[0.25, 0.333333, 0.5],[3, 4, 5],[2, 3, 4],[0.142857, 0.166667, 0.2],[1, 1, 1],[6, 7, 8]],[[1, 2, 3],[4, 5, 6],[3, 4, 5],[7, 8, 9],[6, 7, 8],[2, 3, 4],[0.333333, 0.5, 1],[5, 6, 7],[4, 5, 6],[1, 1, 1],[5, 6, 7],[9, 9, 9]],[[0.166667, 0.2, 0.25],[0.25, 0.333333, 0.5],[0.25, 0.333333, 0.5],[7, 8, 9],[2, 3, 4],[0.142857, 0.166667, 0.2],[0.166667, 0.2, 0.25],[3, 4, 5],[1, 1, 1],[0.166667, 0.2, 0.25],[0.25, 0.333333, 0.5],[4, 5, 6]],[[0.125, 0.142857, 0.166667],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[4, 5, 6],[0.25, 0.333333, 0.5],[0.166667, 0.2, 0.25],[0.142857, 0.166667, 0.2],[1, 1, 1],[0.2, 0.25, 0.333333],[0.142857, 0.166667, 0.2],[0.2, 0.25, 0.333333],[3, 4, 5]],[[0.333333, 0.5, 1],[2, 3, 4],[2, 3, 4],[7, 8, 9],[6, 7, 8],[3, 4, 5],[1, 1, 1],[5, 6, 7],[4, 5, 6],[1, 2, 3],[2, 3, 4],[7, 8, 9]],[[0.25, 0.333333, 0.5],[2, 3, 4],[2, 3, 4],[7, 8, 9],[3, 4, 5],[1, 1, 1],[0.2, 0.25, 0.333333],[4, 5, 6],[5, 6, 7],[0.25, 0.333333, 0.5],[2, 3, 4],[5, 6, 7]],[[0.166667, 0.2, 0.25],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[5, 6, 7],[1, 1, 1],[0.2, 0.25, 0.333333],[0.125, 0.142857, 0.166667],[2, 3, 4],[0.25, 0.333333, 0.5],[0.125, 0.142857, 0.166667],[0.333333, 0.5, 1],[5, 6, 7]],[[0.111111, 0.125, 0.142857],[0.142857, 0.166667, 0.2],[0.125, 0.142857, 0.166667],[1, 1, 1],[0.142857, 0.166667, 0.2],[0.111111, 0.125, 0.142857],[0.111111, 0.125, 0.142857],[0.166667, 0.2, 0.25],[0.111111, 0.125, 0.142857],[0.111111, 0.125, 0.142857],[0.111111, 0.125, 0.142857],[1, 1, 1]],[[0.333333, 0.5, 1],[2, 3, 4],[1, 1, 1],[6, 7, 8],[4, 5, 6],[0.25, 0.333333, 0.5],[0.25, 0.333333, 0.5],[4, 5, 6],[2, 3, 4],[0.2, 0.25, 0.333333],[2, 3, 4],[7, 8, 9]],[[0.2, 0.25, 0.333333],[1, 1, 1],[0.25, 0.333333, 0.5],[5, 6, 7],[3, 4, 5],[0.25, 0.333333, 0.5],[0.25, 0.333333, 0.5],[3, 4, 5],[2, 3, 4],[0.166667, 0.2, 0.25],[0.333333, 0.5, 1],[5, 6, 7]],[[1, 1, 1],[3, 4, 5],[1, 2, 3],[7, 8, 9],[4, 5, 6],[2, 3, 4],[1, 2, 3],[6, 7, 8],[4, 5, 6],[0.333333, 0.5, 1],[4, 5, 6],[9, 9, 9]]]))
A3 = np.rot90(np.array([[[0.2, 0.25, 0.333333],[0.2, 0.25, 0.333333],[0.2, 0.25, 0.333333],[1, 1, 1],[0.142857, 0.166667, 0.2],[0.142857, 0.166667, 0.2],[0.166667, 0.2, 0.25],[0.25, 0.333333, 0.5],[0.333333, 0.5, 1],[0.166667, 0.2, 0.25],[0.25, 0.333333, 0.5],[1, 1, 1]],[[0.25, 0.333333, 0.5],[0.25, 0.333333, 0.5],[0.142857, 0.166667, 0.2],[6, 7, 8],[0.2, 0.25, 0.333333],[0.142857, 0.166667, 0.2],[0.166667, 0.2, 0.25],[3, 4, 5],[0.25, 0.333333, 0.5],[0.125, 0.142857, 0.166667],[1, 1, 1],[2, 3, 4]],[[2, 3, 4],[4, 5, 6],[2, 3, 4],[9, 9, 9],[2, 3, 4],[1, 2, 3],[2, 3, 4],[4, 5, 6],[3, 4, 5],[1, 1, 1],[6, 7, 8],[4, 5, 6]],[[0.333333, 0.5, 1],[0.333333, 0.5, 1],[0.2, 0.25, 0.333333],[6, 7, 8],[1, 2, 3],[0.166667, 0.2, 0.25],[0.142857, 0.166667, 0.2],[2, 3, 4],[1, 1, 1],[0.2, 0.25, 0.333333],[2, 3, 4],[1, 2, 3]],[[0.166667, 0.2, 0.25],[0.2, 0.25, 0.333333],[0.2, 0.25, 0.333333],[4, 5, 6],[0.25, 0.333333, 0.5],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[1, 1, 1],[0.25, 0.333333, 0.5],[0.166667, 0.2, 0.25],[0.2, 0.25, 0.333333],[2, 3, 4]],[[1, 2, 3],[2, 3, 4],[0.333333, 0.5, 1],[7, 8, 9],[3, 4, 5],[0.25, 0.333333, 0.5],[1, 1, 1],[4, 5, 6],[5, 6, 7],[0.25, 0.333333, 0.5],[4, 5, 6],[4, 5, 6]],[[1, 2, 3],[3, 4, 5],[2, 3, 4],[7, 8, 9],[3, 4, 5],[1, 1, 1],[2, 3, 4],[3, 4, 5],[4, 5, 6],[0.333333, 0.5, 1],[5, 6, 7],[5, 6, 7]],[[0.2, 0.25, 0.333333],[0.25, 0.333333, 0.5],[0.166667, 0.2, 0.25],[6, 7, 8],[1, 1, 1],[0.2, 0.25, 0.333333],[0.2, 0.25, 0.333333],[2, 3, 4],[0.333333, 0.5, 1],[0.25, 0.333333, 0.5],[3, 4, 5],[5, 6, 7]],[[0.125, 0.142857, 0.166667],[0.142857, 0.166667, 0.2],[0.111111, 0.125, 0.142857],[1, 1, 1],[0.125, 0.142857, 0.166667],[0.111111, 0.125, 0.142857],[0.111111, 0.125, 0.142857],[0.166667, 0.2, 0.25],[0.125, 0.142857, 0.166667],[0.111111, 0.111111, 0.111111],[0.125, 0.142857, 0.166667],[1, 1, 1]],[[1, 2, 3],[2, 3, 4],[1, 1, 1],[7, 8, 9],[4, 5, 6],[0.25, 0.333333, 0.5],[1, 2, 3],[3, 4, 5],[3, 4, 5],[0.25, 0.333333, 0.5],[5, 6, 7],[3, 4, 5]],[[0.25, 0.333333, 0.5],[1, 1, 1],[0.25, 0.333333, 0.5],[5, 6, 7],[2, 3, 4],[0.2, 0.25, 0.333333],[0.25, 0.333333, 0.5],[3, 4, 5],[1, 2, 3],[0.166667, 0.2, 0.25],[2, 3, 4],[3, 4, 5]],[[1, 1, 1],[2, 3, 4],[0.333333, 0.5, 1],[6, 7, 8],[3, 4, 5],[0.333333, 0.5, 1],[0.333333, 0.5, 1],[4, 5, 6],[1, 2, 3],[0.25, 0.333333, 0.5],[2, 3, 4],[3, 4, 5]]]))
A4 = np.rot90(np.array([[[0.111111, 0.125, 0.142857],[0.125, 0.142857, 0.166667],[0.2, 0.25, 0.333333],[1, 1, 1],[0.166667, 0.2, 0.25],[0.125, 0.142857, 0.166667],[0.111111, 0.111111, 0.111111],[0.142857, 0.166667, 0.2],[0.125, 0.142857, 0.166667],[0.111111, 0.111111, 0.111111],[0.111111, 0.125, 0.142857],[1, 1, 1]],[[0.2, 0.25, 0.333333],[1, 2, 3],[6, 7, 8],[7, 8, 9],[5, 6, 7],[0.25, 0.333333, 0.5],[0.2, 0.25, 0.333333],[2, 3, 4],[2, 3, 4],[0.2, 0.25, 0.333333],[1, 1, 1],[7, 8, 9]],[[2, 3, 4],[4, 5, 6],[6, 7, 8],[9, 9, 9],[5, 6, 7],[1, 2, 3],[2, 3, 4],[5, 6, 7],[4, 5, 6],[1, 1, 1],[3, 4, 5],[9, 9, 9]],[[0.166667, 0.2, 0.25],[0.2, 0.25, 0.333333],[3, 4, 5],[7, 8, 9],[2, 3, 4],[0.2, 0.25, 0.333333],[0.2, 0.25, 0.333333],[0.333333, 0.5, 1],[1, 1, 1],[0.166667, 0.2, 0.25],[0.25, 0.333333, 0.5],[6, 7, 8]],[[0.142857, 0.166667, 0.2],[0.166667, 0.2, 0.25],[1, 2, 3],[7, 8, 9],[1, 1, 1],[0.2, 0.25, 0.333333],[0.166667, 0.2, 0.25],[1, 1, 1],[1, 2, 3],[0.142857, 0.166667, 0.2],[0.25, 0.333333, 0.5],[5, 6, 7]],[[1, 2, 3],[2, 3, 4],[5, 6, 7],[7, 8, 9],[5, 6, 7],[2, 3, 4],[1, 1, 1],[4, 5, 6],[3, 4, 5],[0.25, 0.333333, 0.5],[3, 4, 5],[9, 9, 9]],[[0.333333, 0.5, 1],[1, 2, 3],[6, 7, 8],[9, 9, 9],[4, 5, 6],[1, 1, 1],[0.25, 0.333333, 0.5],[3, 4, 5],[3, 4, 5],[0.333333, 0.5, 1],[2, 3, 4],[6, 7, 8]],[[0.142857, 0.166667, 0.2],[0.166667, 0.2, 0.25],[2, 3, 4],[6, 7, 8],[1, 1, 1],[0.166667, 0.2, 0.25],[0.142857, 0.166667, 0.2],[1, 1, 1],[0.25, 0.333333, 0.5],[0.142857, 0.166667, 0.2],[0.142857, 0.166667, 0.2],[4, 5, 6]],[[0.111111, 0.125, 0.142857],[0.125, 0.142857, 0.166667],[0.166667, 0.2, 0.25],[1, 1, 1],[0.125, 0.142857, 0.166667],[0.111111, 0.111111, 0.111111],[0.111111, 0.125, 0.142857],[0.111111, 0.125, 0.142857],[0.111111, 0.125, 0.142857],[0.111111, 0.111111, 0.111111],[0.111111, 0.125, 0.142857],[1, 1, 1]],[[0.125, 0.142857, 0.166667],[0.166667, 0.2, 0.25],[1, 1, 1],[4, 5, 6],[0.25, 0.333333, 0.5],[0.125, 0.142857, 0.166667],[0.142857, 0.166667, 0.2],[0.333333, 0.5, 1],[0.2, 0.25, 0.333333],[0.125, 0.142857, 0.166667],[0.125, 0.142857, 0.166667],[3, 4, 5]],[[0.2, 0.25, 0.333333],[1, 1, 1],[4, 5, 6],[6, 7, 8],[4, 5, 6],[0.333333, 0.5, 1],[0.25, 0.333333, 0.5],[4, 5, 6],[3, 4, 5],[0.166667, 0.2, 0.25],[0.333333, 0.5, 1],[6, 7, 8]],[[1, 1, 1],[3, 4, 5],[6, 7, 8],[7, 8, 9],[5, 6, 7],[1, 2, 3],[0.333333, 0.5, 1],[5, 6, 7],[4, 5, 6],[0.25, 0.333333, 0.5],[3, 4, 5],[7, 8, 9]]]))

# Matrizes de comparacao dos subcriterios, para cada especialista.
B1 = np.array([[[1,1,1],[0.2,0.25,0.333333]],[[3,4,5],[1,1,1]]])
B2 = np.array([[[1,1,1],[0.125,0.142857,0.166667]],[[6,7,8],[1,1,1]]])
B3 = np.array([[[1,1,1],[0.166667,0.2,0.25]],[[4,5,6],[1,1,1]]])
B4 = np.array([[[1,1,1],[0.111111,0.125,0.142857]],[[7,8,9],[1,1,1]]])

# Pesos de avaliacao de cada especialista.
wk1 = 2
wk2 = 1
wk3 = 1
wk4 = 1

# Calculo dos autovalores e autovetores de cada matriz de comparacao.

A1_crisp = np.ones((len(A1),len(A1)))
A2_crisp = np.ones((len(A2),len(A2)))
A3_crisp = np.ones((len(A3),len(A3)))
A4_crisp = np.ones((len(A4),len(A4)))
B1_crisp = np.ones((len(B1),len(B1)))
B2_crisp = np.ones((len(B2),len(B2)))
B3_crisp = np.ones((len(B3),len(B3)))
B4_crisp = np.ones((len(B4),len(B4)))

for i in range(len(A1)):
    for j in range(len(A1)):
        A1_crisp[i][j] = A1[i][j][1]
        A2_crisp[i][j] = A2[i][j][1]
        A3_crisp[i][j] = A3[i][j][1]
        A4_crisp[i][j] = A4[i][j][1]
for i in range(len(B1)):
    for j in range(len(B1)):
        B1_crisp[i][j] = B1[i][j][1]
        B2_crisp[i][j] = B2[i][j][1]
        B3_crisp[i][j] = B3[i][j][1]
        B4_crisp[i][j] = B4[i][j][1]

wA1, vA1 = np.linalg.eig(A1_crisp)
wA2, vA2 = np.linalg.eig(A2_crisp)
wA3, vA3 = np.linalg.eig(A3_crisp)
wA4, vA4 = np.linalg.eig(A4_crisp)

wB1, vB1 = np.linalg.eig(B1_crisp)
wB2, vB2 = np.linalg.eig(B2_crisp)
wB3, vB3 = np.linalg.eig(B3_crisp)
wB4, vB4 = np.linalg.eig(B4_crisp)

# Calculo do autovalor maximo
lamb_max_A1 = max(wA1)
lamb_max_A2 = max(wA2)
lamb_max_A3 = max(wA3)
lamb_max_A4 = max(wA4)

lamb_max_B1 = max(wB1)
lamb_max_B2 = max(wB2)
lamb_max_B3 = max(wB3)
lamb_max_B4 = max(wB4)

# Calculo dos indices de consistencia e razao de consistencia, com base no indice de consistencia randomico tabelado.
IR_12 = 1.48
IR_2 = 1E-6 # 0,00

IC_A1 = (lamb_max_A1 - len(A1_crisp))/(len(A1_crisp) - 1)
RC_A1 = IC_A1/IR_12
IC_A2 = (lamb_max_A2 - len(A2_crisp))/(len(A2_crisp) - 1)
RC_A2 = IC_A2/IR_12
IC_A3 = (lamb_max_A3 - len(A3_crisp))/(len(A3_crisp) - 1)
RC_A3 = IC_A3/IR_12
IC_A4 = (lamb_max_A4 - len(A4_crisp))/(len(A4_crisp) - 1)
RC_A4 = IC_A4/IR_12

IC_B1 = (lamb_max_B1 - len(B1_crisp))/(len(B1_crisp) - 1)
RC_B1 = IC_B1/IR_2
IC_B2 = (lamb_max_B2 - len(B2_crisp))/(len(B2_crisp) - 1)
RC_B2 = IC_B2/IR_2
IC_B3 = (lamb_max_B3 - len(B3_crisp))/(len(B3_crisp) - 1)
RC_B3 = IC_B3/IR_2
IC_B4 = (lamb_max_B4 - len(B4_crisp))/(len(B4_crisp) - 1)
RC_B4 = IC_B4/IR_2

print ("A: Lamb_max\tIC\tIR\tRC")
print(str(lamb_max_A1) + "\t" + str(IC_A1) + "\t" + str(IR_12) + "\t" + str(RC_A1))
print(str(lamb_max_A2) + "\t" + str(IC_A2) + "\t" + str(IR_12) + "\t" + str(RC_A2))
print(str(lamb_max_A3) + "\t" + str(IC_A3) + "\t" + str(IR_12) + "\t" + str(RC_A3))
print(str(lamb_max_A4) + "\t" + str(IC_A4) + "\t" + str(IR_12) + "\t" + str(RC_A4))

print ("\nB: Lamb_max\tIC\tIR\tRC")
print(str(lamb_max_B1) + "\t" + str(IC_B1) + "\t" + str(IR_2) + "\t" + str(RC_B1))
print(str(lamb_max_B2) + "\t" + str(IC_B2) + "\t" + str(IR_2) + "\t" + str(RC_B2))
print(str(lamb_max_B3) + "\t" + str(IC_B3) + "\t" + str(IR_2) + "\t" + str(RC_B3))
print(str(lamb_max_B4) + "\t" + str(IC_B4) + "\t" + str(IR_2) + "\t" + str(RC_B4))
print(5*'-------')

# Calculo da matriz de comparacao dos criterios, utilizando a media ponderada.
A = (1.0/(wk1 + wk2 + wk3 + wk4))*(wk1*A1 + wk2*A2 + wk3*A3 + wk4*A4)
#A = ((A1**wk1)*(A2**wk2)*(A3**wk3)*(A4**wk4))**(1.0/(wk1 + wk2 + wk3 + wk4))

# Calculo da matriz de comparacao dos subcriterios, utilizando a media ponderada.
B = (1.0/(wk1 + wk2 + wk3 + wk4))*(wk1*B1 + wk2*B2 + wk3*B3 + wk4*B4)
#B = ((B1**wk1)*(B2**wk2)*(B3**wk3)*(B4**wk4))**(1.0/(wk1 + wk2 + wk3 + wk4))

# Imprimir as matrizes A e B de forma legi­vel.
print("A = ")
for i in range(len(A)):
    for elem in A[i]:
        print('(', end='')
        for subelem in elem:
            print(str(round(subelem,4))+',', end=' ')
        print('\b\b)', end=';')
    print('')

print(5*'-----')

print("B = ")
for i in range(len(B)):
    for elem in B[i]:
        print('(', end='')
        for subelem in elem:
            print(str(round(subelem,4))+',', end=' ')
        print('\b\b)', end=';')
    print('')

print(5*'-------')

# Calculo dos vetores de prioridade relativa
vA = []
wA = []
wA_crisp = []
vB = []
wB = []
wB_crisp = []

for i in range(len(A)):
    vA.append(np.array([1.0,1.0,1.0]))
    for j in range(len(A)):
        vA[i] *= A[i][j]
    vA[i] = vA[i]**(1.0/len(A))
for i in range(len(vA)):
    wA.append(vA[i]*np.flip(sum(vA)**(-1)))
    wA_crisp.append(sum(wA[i])/3)
wA_crisp_norm = np.asarray(wA_crisp)/sum(wA_crisp)

for i in range(len(B)):
    vB.append(np.array([1.0,1.0,1.0]))
    for j in range(len(B)):
        vB[i] *= B[i][j]
    vB[i] = vB[i]**(1.0/len(B))
for i in range(len(vB)):
    wB.append(vB[i]*np.flip(sum(vB)**(-1)))
    wB_crisp.append(sum(wB[i])/3)
wB_crisp_norm = np.asarray(wB_crisp)/sum(wB_crisp)

print("wA = \n" + str(wA) + "\n\n" + str(wA_crisp) + "\n\n" + str(wA_crisp_norm))
print("\nwB = \n" + str(wB) + "\n\n" + str(wB_crisp) + "\n\n" + str(wB_crisp_norm))
print(5*'-------')










